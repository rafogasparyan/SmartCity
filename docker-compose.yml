version: "3"

x-spark-common: &spark-common
  image: bitnami/spark:latest
  volumes:
    - ./jobs:/opt/bitnami/spark/jobs
  command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
  depends_on:
    - spark-master
  environment:
    SPARK_MODE: WORKER
    SPARK_WORKER_CORES: 2
    SPARK_WORKER_MEMORY: 1g
    SPARK_MASTER_URL: spark://spark-master:7077
  networks:
    - datamasterylab

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - datamasterylab
  broker:
    image: confluentinc/cp-server:7.4.0
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: broker
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081 #we can even remove this, we dont use it
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    healthcheck:
      test: ["CMD", "bash", "-c", "nc -z localhost 9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - datamasterylab
  spark-master:
    image: bitnami/spark:latest
    volumes:
      - ./jobs:/opt/bitnami/spark/jobs
    command: bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "9090:8080"
      - "7077:7077"
    networks:
      - datamasterylab
  spark-worker-1:
    <<: *spark-common
  spark-worker-2:
    <<: *spark-common
#  we will need worker 3,4 if we increase the number of workers SPARK_WORKER_CORES in line ~12
#  spark-worker-3:
#    <<: *spark-common
#  spark-worker-4:
#    <<: *spark-common
  
  
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - datamasterylab
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
      
  schema-registry:
    image: apicurio/apicurio-registry-mem:2.4.1.Final
    ports:
      - "8081:8080"
    networks:
      - datamasterylab    
  data-producer:
    build:
      context: .
      dockerfile: jobs/Dockerfile
    depends_on:
      broker:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: broker:29092
    command: python main.py
    networks:
      - datamasterylab     
  route-optimizer:
    build: ./CSharpServices/RouteOptimizationService
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - RUN_SAMPLE_TEST=false
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - REDIS_CONNECTION=redis:6379
    networks:
      - datamasterylab
    depends_on:
      broker:
          condition: service_healthy
      redis:
          condition: service_healthy
      data-producer:
        condition: service_completed_successfully
    dns: 8.8.8.8
    dns_search: .
  llm-driver-assistent:
    build: ./LLMDriverAssistant
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=broker:29092
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      broker:
        condition: service_healthy
      data-producer:
        condition: service_started
    networks:
      - datamasterylab





networks:
  datamasterylab:




